generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id(map: "pk_user") @default(dbgenerated("uuid_generate_v4()")) @map("user_id")
  profileInfo ProfileInfo?
  workout     Workout[]    @relation("userToworkout")

  @@map("user")
}

model Difficulty {
  id        Int        @id(map: "pk_difficulty") @default(autoincrement()) @map("difficulty_id")
  name      String     @db.VarChar(20)
  exercises Exercise[]

  @@map("difficulty")
}

model Equipment {
  id        Int        @id(map: "pk_equipment") @default(autoincrement()) @map("equipment_id")
  name      String     @db.VarChar(40)
  exercises Exercise[]

  @@map("equipment")
}

model ExerciseType {
  id        Int        @id(map: "pk_exercise_type") @default(autoincrement()) @map("exercise_type_id")
  name      String     @db.VarChar(30)
  exercises Exercise[]

  @@map("exercise_type")
}

model MuscleGroup {
  id        Int        @id(map: "pk_tag") @default(autoincrement()) @map("muscle_group_id")
  name      String     @db.VarChar(25)
  exercises Exercise[]

  @@map("muscle_group")
}

model ProfileInfo {
  id             String   @id(map: "pk_profileinfo") @map("user_id")
  height         Decimal? @db.Decimal
  weight         Decimal? @db.Decimal
  bio            String?  @db.VarChar(140)
  profilePicture String?  @map("profile_picture") @db.VarChar(200)
  name           String   @db.VarChar(50)
  username       String   @unique(map: "unique_username_constraint") @db.VarChar(16)
  user           User     @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_13")

  @@index([id], map: "fkidx_14")
  @@map("profile_info")
}

model Exercise {
  id             String            @id(map: "pk_exercise") @default(dbgenerated("uuid_generate_v4()")) @map("exercise_id") @db.Uuid
  name           String            @db.VarChar(100)
  muscleGroupId  Int               @map("muscle_group_id")
  exerciseTypeId Int               @map("exercise_type_id")
  equipmentId    Int               @map("equipment_id")
  difficultyId   Int               @map("difficulty_id")
  languageId     Int               @default(1) @map("language_id")
  difficulty     Difficulty        @relation(fields: [difficultyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_114")
  equipment      Equipment         @relation(fields: [equipmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_98")
  exerciseType   ExerciseType      @relation(fields: [exerciseTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_91")
  language       Language          @relation("exerciseToLanguage", fields: [languageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_105")
  muscleGroup    MuscleGroup       @relation(fields: [muscleGroupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_60")
  workouts       WorkoutExercise[]

  @@index([languageId], map: "fkidx_106")
  @@index([difficultyId], map: "fkidx_115")
  @@index([muscleGroupId], map: "fkidx_61")
  @@index([exerciseTypeId], map: "fkidx_92")
  @@index([equipmentId], map: "fkidx_99")
  @@map("exercise")
}

model Workout {
  id           String            @id(map: "pk_routine") @default(dbgenerated("uuid_generate_v4()")) @map("workout_id") @db.Uuid
  userId       String            @map("user_id")
  name         String            @db.VarChar(50)
  description  String            @db.VarChar(140)
  creationDate DateTime          @default(dbgenerated("timezone('utc'::text, now())")) @map("creation_date") @ignore @db.Timestamptz(6)
  basedOnId    String?           @map("based_on") @db.Uuid
  basedOn      Workout?          @relation("BasedWorkouts", fields: [basedOnId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_79")
  user         User              @relation("userToworkout", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_23")
  baseOf       Workout[]         @relation("BasedWorkouts")
  exercises    WorkoutExercise[]

  @@index([userId], map: "fkidx_24")
  @@index([basedOnId], map: "fkidx_80")
  @@map("workout")
}

model WorkoutExercise {
  sets        Int
  repetitions Int
  notes       String?  @db.VarChar(140)
  exerciseId  String   @map("exercise_id") @db.Uuid
  workoutId   String   @map("workout_id") @db.Uuid
  rest        Int
  id          Int      @id(map: "pk_workout_exercise") @default(autoincrement()) @map("workout_exercise_id")
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_70")
  workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_73")

  @@index([exerciseId], map: "fkidx_71")
  @@index([workoutId], map: "fkidx_74")
  @@map("workout_exercise")
}

model Language {
  id           Int        @id(map: "pk_language") @default(autoincrement()) @map("language_id")
  name         String     @db.VarChar(30)
  languageCode String     @map("language_code") @db.Char(5)
  exercise     Exercise[] @relation("exerciseToLanguage")

  @@map("language")
}
